# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - deploy

variables:
  MY_SSH_REMOTE_SERVER: 'root@rabbeh.giize.com -p 22'

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Setting up Flutter"
    - git clone https://github.com/flutter/flutter.git -b stable --depth 1
    - export PATH="$PATH:`pwd`/flutter/bin"
    - flutter --version
    - flutter pub get
    - flutter config --enable-web
    - flutter build web --release
    - cp -R build/web/* ansible/template/flutter_build


deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: development
  before_script:
    - apt-get update && apt-get install -y coreutils
    - mkdir -p ~/.ssh
    - echo "$vps_key" | base64 --decode > ~/.ssh/id_rsa 
    - chmod 600 ~/.ssh/id_rsa
    - echo "Host *" > ~/.ssh/config
    - echo "    StrictHostKeyChecking no" >> ~/.ssh/config
    - echo "    UserKnownHostsFile=/dev/null" >> ~/.ssh/config
    - apt-get update
    - apt-get install -y ansible
  script:
    - echo "Testing SSH connection"
    - ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa '$MY_SSH_REMOTE_SERVER'" 'echo "SSH connection successful"'
    - echo "Navigating to Ansible directory"
    - cd ansible
    - echo "Running Ansible Playbook"
    - ansible-playbook -i inventory.ini playbook.yaml
